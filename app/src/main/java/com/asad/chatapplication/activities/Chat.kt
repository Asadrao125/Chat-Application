package com.asad.chatapplication.activitiesimport android.annotation.SuppressLintimport android.app.Activityimport android.app.Dialogimport android.content.Contextimport android.content.Intentimport android.graphics.Pointimport android.graphics.drawable.BitmapDrawableimport android.graphics.drawable.ColorDrawableimport android.media.MediaPlayerimport android.media.MediaPlayer.OnCompletionListenerimport android.net.Uriimport android.os.Bundleimport android.view.Gravityimport android.view.LayoutInflaterimport android.view.Viewimport android.view.Windowimport android.widget.*import androidx.annotation.NonNullimport androidx.appcompat.app.AppCompatActivityimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.asad.chatapplication.Rimport com.asad.chatapplication.adapters.ChatAdapterimport com.asad.chatapplication.models.ChatModelimport com.asad.chatapplication.utils.*import com.asad.chatapplication.utils.StaticFunctions.Companion.ApiCallForNotificationimport com.asad.chatapplication.utils.StaticFunctions.Companion.FormateMilliSeccondimport com.asad.chatapplication.utils.StaticFunctions.Companion.GetCurrentDateimport com.asad.chatapplication.utils.StaticFunctions.Companion.GetWallpapperListimport com.asad.chatapplication.utils.StaticFunctions.Companion.ShowToastimport com.bumptech.glide.Glideimport com.devlomi.record_view.OnRecordListenerimport com.devlomi.record_view.RecordButtonimport com.devlomi.record_view.RecordViewimport com.google.android.gms.tasks.OnCompleteListenerimport com.google.android.gms.tasks.OnFailureListenerimport com.google.android.gms.tasks.OnSuccessListenerimport com.google.firebase.auth.FirebaseAuthimport com.google.firebase.database.*import com.google.firebase.storage.FirebaseStorageimport com.google.firebase.storage.UploadTaskimport com.squareup.picasso.Picassoimport kotlinx.android.synthetic.main.popup_menu_layout.view.*import java.io.Fileimport java.text.SimpleDateFormatimport java.util.*import kotlin.collections.ArrayListclass Chat : AppCompatActivity() {    var senderId: String = ""    var recieverId: String = ""    var recieverName: String = ""    var recieverProfilePic: String = ""    var fcmToken: String = ""    var senderName: String = ""    var senderProfilePic: String = ""    var etMessage: EditText? = null    var imgSend: ImageView? = null    var imgAttachment: ImageView? = null    var tvUsername: TextView? = null    var profilePic: ImageView? = null    var imgBack: ImageView? = null    var tvOnline: TextView? = null    var nameLayout: LinearLayout? = null    var mChat: ArrayList<ChatModel>? = ArrayList()    var chatRecyclerview: RecyclerView? = null    var chatAdapter: ChatAdapter? = null    var Image_Request_Code = 7    var FILE_Request_Code = 8    var customProgressDialog: DialogCustomProgress? = null    var seenListener: ValueEventListener? = null    var chatRefrence: DatabaseReference? = null    var audioRecorder: AudioRecorder? = null    var mediaPlayer: MediaPlayer = MediaPlayer()    var messageLayout: RelativeLayout? = null    var dataProcessor: DataProccessor? = null    var bgImage: ImageView? = null    var imgWallpapper: ImageView? = null    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.chat)        getSupportActionBar()?.hide()        dataProcessor = DataProccessor(this)        senderId = intent.getStringExtra("senderId")!!        recieverId = intent.getStringExtra("recieverId")!!        recieverName = intent.getStringExtra("recieverName")!!        fcmToken = intent.getStringExtra("token")!!        senderName = intent.getStringExtra("senderName")!!        recieverProfilePic = intent.getStringExtra("recieverPic")!!        senderProfilePic = intent.getStringExtra("senderPic")!!        customProgressDialog = DialogCustomProgress(this)        nameLayout = findViewById(R.id.nameLayout)        messageLayout = findViewById(R.id.messageLayout)        etMessage = findViewById(R.id.etMessage)        imgSend = findViewById(R.id.imgSend)        imgAttachment = findViewById(R.id.imgAttachment)        chatRecyclerview = findViewById(R.id.chatRecyclerview)        tvUsername = findViewById(R.id.tvUsername)        profilePic = findViewById(R.id.profilePic)        imgBack = findViewById(R.id.imgBack)        tvOnline = findViewById(R.id.tvOnline)        bgImage = findViewById(R.id.bgImage)        imgWallpapper = findViewById(R.id.imgWallpapper)        val linearLayoutManager = LinearLayoutManager(this)        linearLayoutManager.stackFromEnd = true        chatRecyclerview?.layoutManager = linearLayoutManager        chatRecyclerview?.setHasFixedSize(true)        tvUsername?.setText(recieverName)        Picasso.get().load(recieverProfilePic).placeholder(R.drawable.ic_user).into(profilePic)        setWallpapper()        imgWallpapper?.setOnClickListener {            val intent = Intent(this, ChatWallpapper::class.java)            startActivity(intent)        }        imgBack?.setOnClickListener(View.OnClickListener {            onBackPressed()        })        nameLayout?.setOnClickListener {            val intent = Intent(this, ViewProfile::class.java)            intent.putExtra("id", recieverId)            startActivity(intent)        }        chatRecyclerview?.addOnItemTouchListener(            RecyclerItemClickListener(                applicationContext,                chatRecyclerview!!, object : RecyclerItemClickListener.OnItemClickListener {                    override fun onItemClick(view: View?, position: Int) {                        if (position >= 0) {                            val chatModel: ChatModel = mChat!!.get(position)                            if (!chatModel.voiceMessage.isEmpty()) {                                chatAdapter!!.selectedPosition = position                                chatAdapter!!.notifyDataSetChanged()                                if (mediaPlayer != null) {                                    if (mediaPlayer.isPlaying()) {                                        mediaPlayer.stop()                                        mediaPlayer.reset()                                    }                                }                                if (mediaPlayer.isPlaying()) {                                    mediaPlayer.stop()                                    mediaPlayer.reset()                                } else {                                    mediaPlayer = MediaPlayer()                                    mediaPlayer.setDataSource(chatModel.voiceMessage)                                    mediaPlayer.prepare()                                    mediaPlayer.start()                                }                                mediaPlayer.setOnCompletionListener(OnCompletionListener { mediaPlayer ->                                    mediaPlayer.stop()                                    chatAdapter!!.selectedPosition = -1                                    chatAdapter!!.notifyDataSetChanged()                                })                            }                        }                    }                    override fun onItemLongClick(view: View?, position: Int) {                        val location = IntArray(2)                        view!!.getLocationOnScreen(location)                        val p = Point()                        p.x = location[0]                        p.y = location[1]                        if (FirebaseAuth.getInstance().currentUser!!.uid.equals(mChat!!.get(position).recieverId)) {                            showStatusPopup(                                this@Chat,                                p,                                mChat!!.get(position).messageId,                                mChat!!.get(position).messageReaction,                                true                            )                        } else {                            showStatusPopup(                                this@Chat,                                p,                                mChat!!.get(position).messageId,                                mChat!!.get(position).messageReaction,                                false                            )                        }                    }                })        )        imgSend?.setOnClickListener(View.OnClickListener {            val time: String =                SimpleDateFormat("hh:mm aa", Locale.getDefault()).format(Date())            val message: String = etMessage?.text.toString().trim()            if (!message.isEmpty()) {                sendMessage(                    senderId, recieverId, message, "", time, "",                    "", 1, ""                )            }        })        imgAttachment?.setOnClickListener(View.OnClickListener {            val popupMenu = PopupMenu(this@Chat, imgAttachment)            popupMenu.getMenuInflater().inflate(R.menu.menu, popupMenu.getMenu())            popupMenu.setForceShowIcon(true)            popupMenu.setOnMenuItemClickListener { menuItem ->                if (menuItem.itemId == R.id.imageMenu) {                    val intent = Intent()                    intent.type = "image/*"                    intent.action = Intent.ACTION_GET_CONTENT                    startActivityForResult(intent, Image_Request_Code)                } else if (menuItem.itemId == R.id.fileMenu) {                    val intent = Intent().setType("*/*").setAction(Intent.ACTION_GET_CONTENT)                    startActivityForResult(                        Intent.createChooser(intent, "Select a file"),                        FILE_Request_Code                    )                } else if (menuItem.itemId == R.id.voiceMenu) {                    showVoiceDialog()                }                true            }            popupMenu.show()        })        readMessages(senderId, recieverId)        seenMessage()    }    private fun setWallpapper() {        val wallpapper_pos: Int = dataProcessor!!.getInt("wallpapper_pos")        if (wallpapper_pos != -1) {            Glide.with(this).load(GetWallpapperList().get(wallpapper_pos))                .placeholder(R.drawable.ic_launcher_background).into(bgImage!!)        } else {            bgImage!!.visibility = View.GONE        }    }    override fun onResume() {        super.onResume()        setWallpapper()    }    fun showVoiceDialog() {        val dialog = Dialog(this)        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)        dialog.setContentView(R.layout.attach_voice_dialog)        dialog.window!!.setBackgroundDrawable(ColorDrawable(android.graphics.Color.TRANSPARENT))        val recordView = dialog.findViewById<RecordView>(R.id.record_view)        val recordButton = dialog.findViewById<RecordButton>(R.id.record_button)        recordButton.setRecordView(recordView)        recordView.setOnRecordListener(object : OnRecordListener {            override fun onStart() {                audioRecorder = AudioRecorder("Service/AUD" + System.currentTimeMillis())                audioRecorder!!.start()            }            override fun onCancel() {}            override fun onFinish(recordTime: Long, limitReached: Boolean) {                audioRecorder!!.stop()                val duration = FormateMilliSeccond(recordTime)                uploadVoiceMessageToFirebase(Uri.fromFile(File(audioRecorder!!.path)), duration)                dialog.dismiss()            }            override fun onLessThanSecond() {}        })        recordView.setOnBasketAnimationEndListener {}        dialog.show()    }    @SuppressLint("NewApi")    private fun showStatusPopup(        context: Activity,        p: Point,        messageId: String,        messageReaction: String,        b: Boolean    ) {        val viewGroup = context.findViewById<View>(R.id.llSortChangePopup)        val layoutInflater =            context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater        val layout: View = layoutInflater.inflate(R.layout.popup_menu_layout, null)        val changeStatusPopUp = PopupWindow(context)        changeStatusPopUp.setContentView(layout)        changeStatusPopUp.setWidth(LinearLayout.LayoutParams.MATCH_PARENT)        changeStatusPopUp.setHeight(LinearLayout.LayoutParams.WRAP_CONTENT)        changeStatusPopUp.setFocusable(true)        val OFFSET_X = 30        val OFFSET_Y = -200        changeStatusPopUp.setBackgroundDrawable(BitmapDrawable())        changeStatusPopUp.showAtLocation(layout, Gravity.NO_GRAVITY, p.x + OFFSET_X, p.y + OFFSET_Y)        val imglike: ImageView = layout.findViewById(R.id.imgLike)        val imgHeart: ImageView = layout.findViewById(R.id.imgHeart)        val imgSmile: ImageView = layout.findViewById(R.id.imgSmile)        val imgShock: ImageView = layout.findViewById(R.id.imgShock)        val imgSad: ImageView = layout.findViewById(R.id.imgSad)        val imgAngry: ImageView = layout.findViewById(R.id.imgAngry)        val reactionLayout: LinearLayout = layout.findViewById(R.id.reactionLayout)        val tvDelete: TextView = layout.findViewById(R.id.tvDelete)        if (b) {            reactionLayout.visibility = View.VISIBLE            tvDelete.visibility = View.GONE        } else {            reactionLayout.visibility = View.GONE            tvDelete.visibility = View.VISIBLE        }        tvDelete.setOnClickListener {            FirebaseDatabase.getInstance().getReference().child("Chats").child(messageId)                .removeValue()            changeStatusPopUp.dismiss()        }        val refrence: DatabaseReference = FirebaseDatabase.getInstance()            .getReference().child("Chats").child(messageId).child("messageReaction")        if (messageReaction.equals("LIKE")) {            imglike.setBackgroundResource(R.drawable.reaction_selected_circle)        } else if (messageReaction.equals("HEART")) {            imgHeart.setBackgroundResource(R.drawable.reaction_selected_circle)        } else if (messageReaction.equals("SMILE")) {            imgSmile.setBackgroundResource(R.drawable.reaction_selected_circle)        } else if (messageReaction.equals("SHOCK")) {            imgShock.setBackgroundResource(R.drawable.reaction_selected_circle)        } else if (messageReaction.equals("SAD")) {            imgSad.setBackgroundResource(R.drawable.reaction_selected_circle)        } else if (messageReaction.equals("ANGRY")) {            imgAngry.setBackgroundResource(R.drawable.reaction_selected_circle)        }        imglike.setOnClickListener {            if (messageReaction.equals("LIKE")) {                refrence.setValue("No")            } else {                refrence.setValue("LIKE")            }            changeStatusPopUp.dismiss()        }        imgHeart.setOnClickListener {            if (messageReaction.equals("HEART")) {                refrence.setValue("No")            } else {                refrence.setValue("HEART")            }            changeStatusPopUp.dismiss()        }        imgSmile.setOnClickListener {            if (messageReaction.equals("SMILE")) {                refrence.setValue("No")            } else {                refrence.setValue("SMILE")            }            changeStatusPopUp.dismiss()        }        imgShock.setOnClickListener {            if (messageReaction.equals("SHOCK")) {                refrence.setValue("No")            } else {                refrence.setValue("SHOCK")            }            changeStatusPopUp.dismiss()        }        imgSad.setOnClickListener {            if (messageReaction.equals("SAD")) {                refrence.setValue("No")            } else {                refrence.setValue("SAD")            }            changeStatusPopUp.dismiss()        }        imgAngry.setOnClickListener {            if (messageReaction.equals("ANGRY")) {                refrence.setValue("No")            } else {                refrence.setValue("ANGRY")            }            changeStatusPopUp.dismiss()        }    }    private fun checkUserStatus() {        val userRef: DatabaseReference =            FirebaseDatabase.getInstance().getReference().child("Statuses")        userRef.child(recieverId).addValueEventListener(object : ValueEventListener {            override fun onDataChange(@NonNull dataSnapshot: DataSnapshot) {                val status: String = dataSnapshot.child("status").value.toString()                val lastSeen: String = dataSnapshot.child("lastSeen").value.toString()                if (!status.isEmpty()) {                    if (status.equals("online")) {                        tvOnline?.setText("Online")                    } else {                        tvOnline?.setText("Last Seen " + lastSeen)                    }                }            }            override fun onCancelled(@NonNull databaseError: DatabaseError) {}        })    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (requestCode == Image_Request_Code            && resultCode == RESULT_OK            && data != null            && data.data != null        ) {            val file_uri = data.data            uploadImageToFirebase(file_uri!!)        } else if (requestCode == FILE_Request_Code            && resultCode == RESULT_OK            && data != null            && data.data != null        ) {            val file_uri = data.data            uploadFileToFirebase(file_uri!!)        }    }    private fun uploadFileToFirebase(fileUri: Uri) {        customProgressDialog?.show()        val fileName = UUID.randomUUID().toString() + "." + StaticFunctions.GetMimeType(            fileUri,            applicationContext        )        val refStorage = FirebaseStorage.getInstance().reference.child("chatFiles/$fileName")        refStorage.putFile(fileUri)            .addOnSuccessListener(                OnSuccessListener<UploadTask.TaskSnapshot> { taskSnapshot ->                    taskSnapshot.storage.downloadUrl.addOnSuccessListener {                        customProgressDialog?.dismiss()                        val time: String =                            SimpleDateFormat("hh:mm aa", Locale.getDefault()).format(Date())                        sendMessage(                            senderId, recieverId, "Shared a file", "", time, "",                            it.toString(), 3, ""                        )                    }                }).addOnFailureListener(OnFailureListener { e ->                customProgressDialog?.hide()                print(e.message)            })    }    private fun uploadVoiceMessageToFirebase(fileUri: Uri, duration: String) {        customProgressDialog?.show()        val fileName = UUID.randomUUID().toString() + "." + StaticFunctions.GetMimeType(            fileUri, applicationContext        )        val refStorage = FirebaseStorage.getInstance().reference.child("chatVoices/$fileName")        refStorage.putFile(fileUri)            .addOnSuccessListener(                OnSuccessListener<UploadTask.TaskSnapshot> { taskSnapshot ->                    taskSnapshot.storage.downloadUrl.addOnSuccessListener {                        customProgressDialog?.dismiss()                        val time: String =                            SimpleDateFormat("hh:mm aa", Locale.getDefault()).format(Date())                        sendMessage(                            senderId, recieverId, "Shared a Voice", duration, time, "",                            "", 4, it.toString()                        )                    }                }).addOnFailureListener(OnFailureListener { e ->                customProgressDialog?.hide()                print(e.message)            })    }    private fun uploadImageToFirebase(fileUri: Uri) {        customProgressDialog?.show()        val fileName = UUID.randomUUID().toString() + ".jpg"        val refStorage = FirebaseStorage.getInstance().reference.child("chatPictures/$fileName")        refStorage.putFile(fileUri)            .addOnSuccessListener(                OnSuccessListener<UploadTask.TaskSnapshot> { taskSnapshot ->                    taskSnapshot.storage.downloadUrl.addOnSuccessListener {                        customProgressDialog?.dismiss()                        val time: String =                            SimpleDateFormat("hh:mm aa", Locale.getDefault()).format(Date())                        sendMessage(                            senderId, recieverId, "Shared an attachment", "",                            time, it.toString(), "", 2, ""                        )                    }                }).addOnFailureListener(OnFailureListener { e ->                customProgressDialog?.hide()                print(e.message)            })    }    private fun sendMessage(        senderId: String,        recieverId: String,        message: String,        duration: String,        time: String,        imageUrl: String,        fileUrl: String,        messageType: Int,        voiceMessage: String    ) {        customProgressDialog?.show()        ApiCallForNotification(            message,            messageType,            imageUrl,            fileUrl,            senderId,            recieverId,            fcmToken,            senderProfilePic,            recieverProfilePic,            senderName,            recieverName,            applicationContext        )        etMessage?.setText("")        val sendMessageRef: DatabaseReference =            FirebaseDatabase.getInstance().getReference().child("Chats")        val pushId = sendMessageRef.push().key        val chatModel = ChatModel(            message, time, pushId!!, senderId, recieverId,            imageUrl, fileUrl, "Delivered", "No", voiceMessage,            messageType.toString(), GetCurrentDate(), duration        )        sendMessageRef.child(pushId).setValue(chatModel).addOnCompleteListener(OnCompleteListener {            customProgressDialog?.dismiss()            if (!it.isSuccessful) {                ShowToast(applicationContext, it.exception?.localizedMessage!!)            }        })    }    private fun readMessages(senderId: String, recieverId: String) {        customProgressDialog?.show()        val readMessageRef: DatabaseReference =            FirebaseDatabase.getInstance().getReference().child("Chats")        readMessageRef.addValueEventListener(object : ValueEventListener {            override fun onDataChange(@NonNull dataSnapshot: DataSnapshot) {                customProgressDialog?.dismiss()                mChat?.clear()                for (snapshot in dataSnapshot.children) {                    val chat: ChatModel = snapshot.getValue(ChatModel::class.java)!!                    if (chat.recieverId.equals(senderId) && chat.senderId.equals(recieverId) ||                        chat.recieverId.equals(recieverId) && chat.senderId.equals(senderId)                    ) {                        mChat?.add(chat)                    }                }                checkUserStatus()                chatAdapter = ChatAdapter(this@Chat, mChat!!, recieverName, recieverProfilePic)                chatRecyclerview!!.adapter = chatAdapter            }            override fun onCancelled(@NonNull databaseError: DatabaseError) {            }        })    }    private fun seenMessage() {        chatRefrence = FirebaseDatabase.getInstance().getReference().child("Chats")        val fuser = FirebaseAuth.getInstance().currentUser        seenListener = chatRefrence!!.addValueEventListener(object : ValueEventListener {            override fun onDataChange(@NonNull dataSnapshot: DataSnapshot) {                for (snapshot in dataSnapshot.children) {                    val chatModel = snapshot.getValue(ChatModel::class.java)                    if (chatModel?.recieverId.equals(fuser?.uid) && chatModel?.senderId.equals(                            recieverId                        )                    ) {                        val hashMap: HashMap<String, Any> = HashMap()                        hashMap["messageStatus"] = "Seen"                        snapshot.ref.updateChildren(hashMap)                    }                }            }            override fun onCancelled(@NonNull databaseError: DatabaseError) {}        })    }    override fun onPause() {        super.onPause()        chatRefrence?.removeEventListener(seenListener!!)    }}